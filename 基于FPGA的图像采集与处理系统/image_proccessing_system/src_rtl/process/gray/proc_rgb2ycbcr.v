// *********************************************************************************
// 文件名: proc_rgb2ycbcr.v   
// 创建人: 梁辉鸿
// 创建日期: 2021.3.23
// 联系方式: 17hhliang3@stu.edu.cn
// --------------------------------------------------------------------------------- 
// 模块名: proc_rgb2ycbcr
// 发布版本号: V0.0
// --------------------------------------------------------------------------------- 
// 功能说明: 1)图像处理算法模块--RGB转YCbCr
//            2)采用三级流水线设计(pipeline)
//             3)算法如下:
//************************************************************
//            RGB888 to YCbCr
//  Y  = 0.299R + 0.587G + 0.114B
//  Cb = 0.568(B - Y) + 128 = -0.172R - 0.339G + 0.511B + 128
//  Cr = 0.713(R - Y) + 128 =  0.511R - 0.428G - 0.083B + 128
//
//  Y  = ( 77 * R + 150 * G +  29 * B) >> 8
//  Cb = (-43 * R -  85 * G + 128 * B) >> 8 + 128
//  Cr = (128 * R - 107 * G -  21 * B) >> 8 + 128
//
//  Y  = ( 77 * R + 150 * G +  29 * B        ) >> 8
//  Cb = (-43 * R -  85 * G + 128 * B + 32768) >> 8
//  Cr = (128 * R - 107 * G -  21 * B + 32768) >> 8
//************************************************************
// --------------------------------------------------------------------------------- 
// 变更描述:     
//    
// ---------------------------------------------------------------------------------
// 发布记录: 	 
//
// ---------------------------------------------------------------------------------
// *********************************************************************************


// ---------------------------------------------------------------------------------
// 引用文件 Include File
// --------------------------------------------------------------------------------- 

// ---------------------------------------------------------------------------------
// 仿真时间 Simulation Timescale
// ---------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------
// 常量参数 Constant Parameters
// ---------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------
// 模块定义 Module Define
// --------------------------------------------------------------------------------- 
module proc_rgb2ycbcr
(
    // clock & reset
    input               clk,                    //时钟信号
	input 			    rst_n,  		        //复位信号, 低电平有效

    // input signal
    // 图像处理前的数据接口
    input               rgb565_vs,              //vsync信号
    input               rgb565_hs,              //hsync信号
    input               rgb565_de,              //data enable信号
    input      [ 4 : 0] rgb565_r,               //输入图像数据R
    input      [ 5 : 0] rgb565_g,               //输入图像数据G
    input      [ 4 : 0] rgb565_b,               //输入图像数据B
    
    // output signal
    //图像处理后的数据接口
    output              ycbcr_vs,               //vsync信号
    output              ycbcr_hs,               //hsync信号
    output              ycbcr_de,               //data enable信号
    output     [ 7 : 0] ycbcr_y,                //输出图像数据Y (灰度)
    output     [ 7 : 0] ycbcr_cb,               //输出图像数据Cb(蓝色色度分量)
    output     [ 7 : 0] ycbcr_cr                //输出图像数据Cr(红色色度分量)
);

// ---------------------------------------------------------------------------------
// 局部常量 Local Constant Parameters
// ---------------------------------------------------------------------------------
    

// ---------------------------------------------------------------------------------
// 模块内变量定义 Module_Variables
// --------------------------------------------------------------------------------- 
    // 乘法分量
    reg        [15 : 0] mult_r_for_y;           
    reg        [15 : 0] mult_r_for_cb;
    reg        [15 : 0] mult_r_for_cr;
    reg        [15 : 0] mult_g_for_y; 
    reg        [15 : 0] mult_g_for_cb;
    reg        [15 : 0] mult_g_for_cr;
    reg        [15 : 0] mult_b_for_y; 
    reg        [15 : 0] mult_b_for_cb;
    reg        [15 : 0] mult_b_for_cr;
    
    // 加法分量
    reg        [15 : 0] add_y;
    reg        [15 : 0] add_cb;
    reg        [15 : 0] add_cr;
    
    // 右移分量
    reg        [ 7 : 0] shift_y;
    reg        [ 7 : 0] shift_cb;
    reg        [ 7 : 0] shift_cr;
    
    // 输入图像的信号三级寄存
    reg        [ 2 : 0] rgb565_vs_d;
    reg        [ 2 : 0] rgb565_hs_d;
    reg        [ 2 : 0] rgb565_de_d;
    
    // RGB888格式的颜色数据
    wire       [ 7 : 0] rgb888_r;
    wire       [ 7 : 0] rgb888_g;
    wire       [ 7 : 0] rgb888_b;

// ---------------------------------------------------------------------------------
// 数据流描述 Continuous Assignments
// --------------------------------------------------------------------------------- 
    // RGB565 to RGB888
    assign  rgb888_r = {rgb565_r, rgb565_r[4 : 2]};
    assign  rgb888_g = {rgb565_g, rgb565_g[5 : 4]};
    assign  rgb888_b = {rgb565_b, rgb565_b[4 : 2]};    
    
    // 同步输出数据接口信号
    assign  ycbcr_vs = rgb565_vs_d[2];
    assign  ycbcr_hs = rgb565_hs_d[2];
    assign  ycbcr_de = rgb565_de_d[2];
    assign  ycbcr_y  = ycbcr_hs? shift_y  : 8'd0;
    assign  ycbcr_cb = ycbcr_hs? shift_cb : 8'd0;
    assign  ycbcr_cr = ycbcr_hs? shift_cr : 8'd0;
    
// ---------------------------------------------------------------------------------
// 行为描述 Clocked Assignments
// ---------------------------------------------------------------------------------
    // 一级流水线: 计算括号内的各乘法项
    always @(posedge clk or negedge rst_n)
    begin
        if(!rst_n)
        begin
            mult_r_for_y  <= 16'd0;
            mult_r_for_cb <= 16'd0;
            mult_r_for_cr <= 16'd0;
            mult_g_for_y  <= 16'd0;
            mult_g_for_cb <= 16'd0;
            mult_g_for_cr <= 16'd0;
            mult_b_for_y  <= 16'd0;
            mult_b_for_cb <= 16'd0;
            mult_b_for_cr <= 16'd0;
        end
        else
        begin
            mult_r_for_y  <= rgb888_r * 8'd77;
            mult_r_for_cb <= rgb888_r * 8'd43;
            mult_r_for_cr <= rgb888_r * 8'd128;
            mult_g_for_y  <= rgb888_g * 8'd150;
            mult_g_for_cb <= rgb888_g * 8'd85;
            mult_g_for_cr <= rgb888_g * 8'd107;
            mult_b_for_y  <= rgb888_b * 8'd29;
            mult_b_for_cb <= rgb888_b * 8'd128;
            mult_b_for_cr <= rgb888_b * 8'd21;
        end
    end
    
    // 二级流水线: 括号内各项相加
    always @(posedge clk or negedge rst_n)
    begin
        if(!rst_n)
        begin
            add_y  <= 16'd0;
            add_cb <= 16'd0;
            add_cr <= 16'd0;
        end
        else
        begin
            add_y  <= mult_r_for_y  + mult_g_for_y  + mult_b_for_y;
            add_cb <= mult_b_for_cb - mult_r_for_cb - mult_g_for_cb + 16'd32768;
            add_cr <= mult_r_for_cr - mult_g_for_cr - mult_b_for_cr + 16'd32768;
        end 
    end   
    
    // 三级流水线: 括号内计算的数据右移8位
    always @(posedge clk or negedge rst_n)
    begin
        if(!rst_n)
        begin
            shift_y  <= 8'd0;
            shift_cb <= 8'd0;
            shift_cr <= 8'd0;
        end
        else
        begin
            shift_y  <= add_y [15 : 8];
            shift_cb <= add_cb[15 : 8];
            shift_cr <= add_cr[15 : 8];
        end
    end
    
    // 延时三拍, 以同步处理后的数据信号
    always @(posedge clk or negedge rst_n)
    begin
        if(!rst_n)
        begin
            rgb565_vs_d <= 3'd0;
            rgb565_hs_d <= 3'd0;
            rgb565_de_d <= 3'd0;
        end
        else
        begin
            rgb565_vs_d <= {rgb565_vs_d[1 : 0], rgb565_vs};
            rgb565_hs_d <= {rgb565_hs_d[1 : 0], rgb565_hs};
            rgb565_de_d <= {rgb565_de_d[1 : 0], rgb565_de};
        end
    end

// ---------------------------------------------------------------------------------
// 结构化描述 Moudle Instantiate
// ---------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------
// 任务定义 Called Tasks
// ---------------------------------------------------------------------------------
    
	
// ---------------------------------------------------------------------------------
// 函数定义 Called Functions
// ---------------------------------------------------------------------------------

    
endmodule 