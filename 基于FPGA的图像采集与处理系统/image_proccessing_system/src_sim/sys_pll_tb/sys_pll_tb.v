// *********************************************************************************
// 文件名: sys_pll_tb.v
// 创建人: 梁辉鸿
// 创建日期: 2021.4.2
// 联系方式: 17hhliang3@stu.edu.cn
// --------------------------------------------------------------------------------- 
// 模块名: sys_pll_tb
// 发布版本号: V0.0
// --------------------------------------------------------------------------------- 
// 功能说明: 1)Testbench for PLL
//
// --------------------------------------------------------------------------------- 
// 变更描述:
//
// ---------------------------------------------------------------------------------
// 发布记录:
//
// ---------------------------------------------------------------------------------
// *********************************************************************************


// ---------------------------------------------------------------------------------
// 引用文件 Include File
// --------------------------------------------------------------------------------- 

// ---------------------------------------------------------------------------------
// 仿真时间 Simulation Timescale
// ---------------------------------------------------------------------------------
`timescale  1ns/1ps

// ---------------------------------------------------------------------------------
// 常量参数 Constant Parameters
// ---------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------
// 模块定义 Module Define
// --------------------------------------------------------------------------------- 
    module sys_pll_tb;

// ---------------------------------------------------------------------------------
// 局部常量 Local Constant Parameters
// ---------------------------------------------------------------------------------
    localparam   T = 20;                 //系统时钟周期, 50MHz

// ---------------------------------------------------------------------------------
// 模块内变量定义 Module_Variables
// --------------------------------------------------------------------------------- 
    // output signal
    reg             sys_clk_50m;
    reg             sys_rst_n;
    
    // input signal
    wire            clk_100m_sdram;
    wire            clk_100m_sdram_shift;
    wire            clk_100m_lcd;
    wire            clk_10m_lcd;
    wire            clk_24m_cmos;
    wire            locked;
    
// ---------------------------------------------------------------------------------
// 数据流描述 Continuous Assignments
// --------------------------------------------------------------------------------- 


// ---------------------------------------------------------------------------------
// 结构化描述 Moudle Instantiate
// ---------------------------------------------------------------------------------
    // PLL 例化
    sys_pll     U_sys_pll
    (
        // clock & reset
        .clk_in                 (sys_clk_50m),
        .areset                 (~sys_rst_n),

        .clk_out1               (clk_100m_sdram),
        .clk_out2               (clk_100m_sdram_shift),
        .clk_out3               (clk_100m_lcd),
        .clk_out4               (clk_10m_lcd),
        .clk_out5               (clk_24m_cmos),
        .locked                 (locked)
    );

// ---------------------------------------------------------------------------------
// 行为描述 Clocked Assignments
// ---------------------------------------------------------------------------------
    initial
    begin
        // Initialize Inputs
                sys_clk_50m = 1'b0;
                sys_rst_n   = 1'b0;
        
        // Wait for global reset to finish
        #(T*5)  sys_rst_n   = 1'b1;
        
        // Add stimulus here
        
        // Finish
        //#(T*10000) $stop;
    end
    
    // Generate global clk
    always #(T/2) sys_clk_50m = ~sys_clk_50m;
    
// ---------------------------------------------------------------------------------
// 任务定义 Called Tasks
// ---------------------------------------------------------------------------------
    
	
// ---------------------------------------------------------------------------------
// 函数定义 Called Functions
// ---------------------------------------------------------------------------------

    
endmodule 