// *********************************************************************************
// 文件名: proc_binarization.v   
// 创建人: 梁辉鸿
// 创建日期: 2021.3.24
// 联系方式: 17hhliang3@stu.edu.cn
// --------------------------------------------------------------------------------- 
// 模块名: proc_binarization
// 发布版本号: V0.0
// --------------------------------------------------------------------------------- 
// 功能说明: 1)图像处理算法模块--二值化处理
//            2)手动指定阈值，通过阈值来进行二值化处理
//             3)阈值: 64
// --------------------------------------------------------------------------------- 
// 变更描述:     
//    
// ---------------------------------------------------------------------------------
// 发布记录: 	 
//
// ---------------------------------------------------------------------------------
// *********************************************************************************


// ---------------------------------------------------------------------------------
// 引用文件 Include File
// --------------------------------------------------------------------------------- 

// ---------------------------------------------------------------------------------
// 仿真时间 Simulation Timescale
// ---------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------
// 常量参数 Constant Parameters
// ---------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------
// 模块定义 Module Define
// --------------------------------------------------------------------------------- 
module proc_binarization
#(
    // prameter passing
    parameter   GRAY_THRESHOLD = 8'd64          //自定灰度阈值
)
(
    // clock & reset
    input               clk,                    //时钟信号
	input 			    rst_n,  		        //复位信号, 低电平有效

    // input signal
    // 图像处理前的数据接口
    input               ycbcr_vs,               //vsync信号
    input               ycbcr_hs,               //hsync信号
    input               ycbcr_de,               //data enable信号
    input      [ 7 : 0] ycbcr_y,                //图像的灰度数据
    
    // output signal
    //图像处理后的数据接口
    output              bin_vs,                 //vsync信号
    output              bin_hs,                 //hsync信号
    output              bin_de,                 //data enable信号
    output     [ 7 : 0] bin_y                   //二值化后的图像数据
);

// ---------------------------------------------------------------------------------
// 局部常量 Local Constant Parameters
// ---------------------------------------------------------------------------------
    

// ---------------------------------------------------------------------------------
// 模块内变量定义 Module_Variables
// --------------------------------------------------------------------------------- 
    reg                 monoc;                  //monochrome 黑白数据, (1=白, 0=黑)
    reg                 ycbcr_vs_d;             //控制信号的一级寄存
    reg                 ycbcr_hs_d;
    reg                 ycbcr_de_d;

// ---------------------------------------------------------------------------------
// 数据流描述 Continuous Assignments
// --------------------------------------------------------------------------------- 
    // 二值化后的图像数据
    assign  bin_y = {8{monoc}};
    
    // 同步输出数据接口信号
    assign  bin_vs = ycbcr_vs_d;
    assign  bin_hs = ycbcr_hs_d;
    assign  bin_de = ycbcr_de_d;
    
// ---------------------------------------------------------------------------------
// 行为描述 Clocked Assignments
// ---------------------------------------------------------------------------------
    // 二值化处理算法
    always @(posedge clk or negedge rst_n)
    begin
        if(!rst_n)
        begin
            monoc <= 1'b0;
        end
        else if(ycbcr_y > GRAY_THRESHOLD)
        begin
            monoc <= 1'b1;          //大于阈值, 为白色图像
        end
        else
        begin
            monoc <= 1'b0;          //小于等于阈值, 为黑色图像
        end
    end
    
    // 延时一拍, 以同步时钟信号
    always @(posedge clk or negedge rst_n)
    begin
        if(!rst_n)
        begin
            ycbcr_vs_d <= 1'b0;
            ycbcr_hs_d <= 1'b0;
            ycbcr_de_d <= 1'b0;
        end
        else
        begin
            ycbcr_vs_d <= ycbcr_vs;
            ycbcr_hs_d <= ycbcr_hs;
            ycbcr_de_d <= ycbcr_de;
        end
    end

// ---------------------------------------------------------------------------------
// 结构化描述 Moudle Instantiate
// ---------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------
// 任务定义 Called Tasks
// ---------------------------------------------------------------------------------
    
	
// ---------------------------------------------------------------------------------
// 函数定义 Called Functions
// ---------------------------------------------------------------------------------

    
endmodule